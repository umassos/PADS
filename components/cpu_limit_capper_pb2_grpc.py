# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import cpu_limit_capper_pb2 as cpu__limit__capper__pb2


class CpuLimitCapperStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.limit_core_number = channel.unary_unary(
                '/CpuLimitCapper/limit_core_number',
                request_serializer=cpu__limit__capper__pb2.Core_Number_Inputs.SerializeToString,
                response_deserializer=cpu__limit__capper__pb2.Core_Output.FromString,
                )
        self.limit_core_usage = channel.unary_unary(
                '/CpuLimitCapper/limit_core_usage',
                request_serializer=cpu__limit__capper__pb2.Core_Usage_Inputs.SerializeToString,
                response_deserializer=cpu__limit__capper__pb2.Core_Output.FromString,
                )


class CpuLimitCapperServicer(object):
    """Missing associated documentation comment in .proto file."""

    def limit_core_number(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def limit_core_usage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CpuLimitCapperServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'limit_core_number': grpc.unary_unary_rpc_method_handler(
                    servicer.limit_core_number,
                    request_deserializer=cpu__limit__capper__pb2.Core_Number_Inputs.FromString,
                    response_serializer=cpu__limit__capper__pb2.Core_Output.SerializeToString,
            ),
            'limit_core_usage': grpc.unary_unary_rpc_method_handler(
                    servicer.limit_core_usage,
                    request_deserializer=cpu__limit__capper__pb2.Core_Usage_Inputs.FromString,
                    response_serializer=cpu__limit__capper__pb2.Core_Output.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'CpuLimitCapper', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CpuLimitCapper(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def limit_core_number(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CpuLimitCapper/limit_core_number',
            cpu__limit__capper__pb2.Core_Number_Inputs.SerializeToString,
            cpu__limit__capper__pb2.Core_Output.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def limit_core_usage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CpuLimitCapper/limit_core_usage',
            cpu__limit__capper__pb2.Core_Usage_Inputs.SerializeToString,
            cpu__limit__capper__pb2.Core_Output.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
