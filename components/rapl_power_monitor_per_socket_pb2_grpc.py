# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import rapl_power_monitor_per_socket_pb2 as components_dot_rapl__power__monitor__per__socket__pb2


class PowerMonitorStub(object):
    """The Power monitoring service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.per_socket_power = channel.unary_unary(
                '/PowerMonitor/per_socket_power',
                request_serializer=components_dot_rapl__power__monitor__per__socket__pb2.No_Input.SerializeToString,
                response_deserializer=components_dot_rapl__power__monitor__per__socket__pb2.Power_Output.FromString,
                )
        self.write_to_file = channel.unary_unary(
                '/PowerMonitor/write_to_file',
                request_serializer=components_dot_rapl__power__monitor__per__socket__pb2.Write_Input.SerializeToString,
                response_deserializer=components_dot_rapl__power__monitor__per__socket__pb2.Write_Output.FromString,
                )


class PowerMonitorServicer(object):
    """The Power monitoring service definition.
    """

    def per_socket_power(self, request, context):
        """take the average power of two samples
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def write_to_file(self, request, context):
        """write power value to file
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PowerMonitorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'per_socket_power': grpc.unary_unary_rpc_method_handler(
                    servicer.per_socket_power,
                    request_deserializer=components_dot_rapl__power__monitor__per__socket__pb2.No_Input.FromString,
                    response_serializer=components_dot_rapl__power__monitor__per__socket__pb2.Power_Output.SerializeToString,
            ),
            'write_to_file': grpc.unary_unary_rpc_method_handler(
                    servicer.write_to_file,
                    request_deserializer=components_dot_rapl__power__monitor__per__socket__pb2.Write_Input.FromString,
                    response_serializer=components_dot_rapl__power__monitor__per__socket__pb2.Write_Output.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'PowerMonitor', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PowerMonitor(object):
    """The Power monitoring service definition.
    """

    @staticmethod
    def per_socket_power(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/PowerMonitor/per_socket_power',
            components_dot_rapl__power__monitor__per__socket__pb2.No_Input.SerializeToString,
            components_dot_rapl__power__monitor__per__socket__pb2.Power_Output.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def write_to_file(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/PowerMonitor/write_to_file',
            components_dot_rapl__power__monitor__per__socket__pb2.Write_Input.SerializeToString,
            components_dot_rapl__power__monitor__per__socket__pb2.Write_Output.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
